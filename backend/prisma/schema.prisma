// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  phone     String?
  role      String   @default("customer")
  address   Json?
  favorites Json? // Almacenará un array de IDs como JSON. Ej: [1, 5, 8]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  transactions Transaction[]

  designs Design[]
  orders  Order[]

  @@map("users")

}

model Charm {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       String
  category    String
  basePrice   Float
  materials   Json? // Almacenará un array de materiales como JSON. Ej: ["plata", "oro"]
  colors      Json? // Almacenará un array de colores como JSON. Ej: ["rojo", "azul"]
  isActive    Boolean  @default(true)
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  designs DesignCharm[]

  @@map("charms")
}

model Design {
  id               Int      @id @default(autoincrement())
  name             String
  description      String?
  images           Json? // Array de URLs de Cloudinary como JSON
  braceletMaterial String
  braceletColor    String
  createdById      Int
  isPublic         Boolean  @default(false)
  price            Float
  tags             Json? // Array de etiquetas como JSON
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  createdBy User          @relation(fields: [createdById], references: [id])
  charms    DesignCharm[]

  @@map("designs")
}

model DesignCharm {
  id        Int    @id @default(autoincrement())
  designId  Int
  charmId   Int
  position  Int
  material  String
  color     String

  design Design @relation(fields: [designId], references: [id])
  charm  Charm  @relation(fields: [charmId], references: [id])

  @@unique([designId, charmId, position])
  @@map("design_charms")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  type        String
  basePrice   Float
  images      Json?    // Cambiar de String[] a Json
  category    String
  customizable Boolean @default(false)
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  tags        Json?    // Cambiar de String[] a Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  availableMaterials Json?
  availableColors    Json?    // Cambiar de String[] a Json

  @@map("products")
}

model Order {
  id            Int         @id @default(autoincrement())
  transactionId Int?
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  items         Json        // Array de items del carrito como JSON
  totalUSD      Float       // Total en dólares
  totalBS       Float?      // Total en bolívares (si aplica)
  status        String      @default("pending")
  paymentMethod String?
  paymentDetails Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("orders")
}


enum PaymentMethod {
  ZELLE
  PAGO_MOVIL
  CRYPTO
  CASH_USD
  CASH_BS
  ZINLI
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  VERIFYING
}

model Transaction {
  id            Int               @id @default(autoincrement())
  userId        Int?
  user          User?             @relation(fields: [userId], references: [id])
  amountUSD     Float
  amountBS      Float?
  exchangeRate  Float?            // Tasa usada para la conversión
  paymentMethod PaymentMethod
  status        TransactionStatus @default(PENDING)
  reference     String?           // Referencia de pago (Pago Móvil)
  senderName    String?           // Nombre del remitente
  senderPhone   String?           // Teléfono del remitente
  screenshot    String?           // URL del comprobante
  adminNotes    String?           // Notas del administrador
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  verifiedAt    DateTime?         // Fecha de verificación
  
  orders        Order[]
  
  @@map("transactions")
}